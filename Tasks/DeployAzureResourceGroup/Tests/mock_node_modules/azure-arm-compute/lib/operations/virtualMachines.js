'use strict';

var util = require('util');

function VirtualMachines(client) {
  this.client = client;
}

VirtualMachines.prototype.list = function (resourceGroupName, options, callback) {
  console.log("virtualMachines.list is called");
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  var apiVersion = '2016-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  var vm = {
    name: "customVM",
    properties: {
      networkProfile: {
        networkInterfaces: [
          {
            id: "nID"
          }
        ]
      },
      "storageProfile": {
        "osDisk": {
          "osType": "Windows"
        }
      }
    }
  }

  if (resourceGroupName.includes("NonWindowsVM")) {
    console.log("herer");
    vm = {
      name: "customVM",
      properties: {
        networkProfile: {
          networkInterfaces: [
            {
              id: "nID"
            }
          ]
        },
        "storageProfile": {
          "osDisk": {
            "osType": "Linux"
          }
        }
      }
    };
  }
  return callback(null, [vm]);
};

VirtualMachines.prototype.start = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.start is called");
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.restart = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.restart is called");
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.powerOff = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.powerOff is called");
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.deleteMethod = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.deleteMethod is called");
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.get = (resourceGroupName, vmName, options, callback) => {
  console.log("virtualMachines.get is called with options: %s", util.inspect(options, { depth: null }));
  var client = this.client;
  if (!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  var expand = (options && options.expand !== undefined) ? options.expand : undefined;
  var apiVersion = '2016-03-30';
  var result = {
    "name": "CustomScriptExtension",
    properties: {
      "instanceView":
      {
        "substatuses":
        [
          {
            "message": "Valid"
          }
        ]
      }
    }
  };
  if (resourceGroupName.includes("InvalidSubstatus")) {
    result = {
      "name": "CustomScriptExtension",
      properties: {
        "instanceView":
        {
          "substatuses":
          [
            {
              "code": "ComponentStatus/StdErr/failed",
              "message": "Failed"
            }
          ]
        }
      }
    };
  }
  return callback(null, result);
};

module.exports = VirtualMachines;